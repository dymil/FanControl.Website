{"version":3,"file":"component---src-pages-docs-tsx-cdd28e0ea824d4d4c8b8.js","mappings":"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","sources":["webpack://fan-control/./src/components/demo/fanCurve.tsx","webpack://fan-control/./src/components/demo/fanCurveCard.tsx","webpack://fan-control/./src/components/demo/mixFanCurveCard.tsx","webpack://fan-control/./src/components/demo/temperatureSource.ts","webpack://fan-control/./src/components/niceHeader.tsx","webpack://fan-control/./src/components/select.tsx","webpack://fan-control/./src/components/docs/fanCurves.tsx","webpack://fan-control/./src/pages/docs.tsx","webpack://fan-control/./src/styles/docs.module.css"],"sourcesContent":["import { TemperatureSource } from \"./temperatureSource\";\r\n\r\ntype FanCurve = {\r\n  name: string;\r\n  getValue: () => number;\r\n};\r\n\r\ntype LinearFanCurve = FanCurve & {\r\n  selectedTemperature?: string;\r\n};\r\n\r\ntype MixFunction = {\r\n  name: string;\r\n  invoke: (fanCurves: FanCurve[]) => number;\r\n};\r\n\r\ntype MixFanCurve = FanCurve & {\r\n  selectedMixFunction: MixFunction;\r\n};\r\n\r\nconst mixFunctions: MixFunction[] = [\r\n  {\r\n    name: \"Max\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((x) => x.getValue()).reduce((a, b) => (a > b ? a : b), -1),\r\n  },\r\n  {\r\n    name: \"Min\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((x) => x.getValue()).reduce((a, b) => (a < b ? a : b), 101),\r\n  },\r\n  {\r\n    name: \"Average\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((f) => f.getValue()).reduce((a, b) => a + b, 0) /\r\n      fanCurves.length,\r\n  },\r\n];\r\n\r\nconst clamp = (num: number, min: number, max: number) =>\r\n  Math.min(Math.max(num, min), max);\r\n\r\nlet createlinearFanCurve = (\r\n  name: string,\r\n  selectedTemperature: string,\r\n  sources: TemperatureSource[]\r\n): LinearFanCurve => {\r\n  const getValue = () => {\r\n    let source = sources.find((x) => x.name == selectedTemperature);\r\n    if (source) {\r\n      return clamp((source.value - 30) * 3, 0, 100);\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  return {\r\n    name,\r\n    selectedTemperature,\r\n    getValue,\r\n  };\r\n};\r\n\r\nlet createMixFanCurve = (\r\n  name: string,\r\n  mixFunction: MixFunction,\r\n  fanCurves: FanCurve[]\r\n): MixFanCurve => {\r\n  return {\r\n    name,\r\n    selectedMixFunction: mixFunction,\r\n    getValue: () => {\r\n      return mixFunction.invoke(fanCurves);\r\n    },\r\n  };\r\n};\r\n\r\nexport type { FanCurve, LinearFanCurve, MixFanCurve, MixFunction };\r\n\r\nexport { mixFunctions, createlinearFanCurve, createMixFanCurve };\r\n","import React from \"react\";\nimport Card from \"../card\";\nimport { FanCurve } from \"./fanCurve\";\n\nconst icon = (path: string) => (\n  <svg className=\"h-12 w-12\" viewBox=\"0 0 24 24\">\n    <path fill=\"currentColor\" d={path} />\n  </svg>\n);\n\ntype Props = {\n  iconPath: string;\n  fanCurve: FanCurve;\n  controlValueSuffix?: string;\n  children?: React.ReactNode;\n};\n\nexport default function FanCurveCard({\n  iconPath,\n  fanCurve,\n  controlValueSuffix,\n  children,\n}: Props) {\n  const background = \"bg-blue-500\";\n  const value = fanCurve.getValue();\n  const isValid = (number: number) => number >= 0 && number <= 100;\n\n  return (\n    <Card className={background}>\n      <div className=\"flex w-52 flex-col text-white\">\n        <div className=\"flex flex-row items-center justify-center\">\n          {icon(iconPath)}\n          <div className=\"ml-4 w-full border-b-2 border-white \">\n            {fanCurve.name}\n          </div>\n        </div>\n        <div>{children}</div>\n        <div className=\"mt-1 flex flex-row justify-between\">\n          <div>\n            <span>{isValid(value) ? value.toFixed(1) : \"-\"} %</span>{\" \"}\n            <span>{controlValueSuffix}</span>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport icons from \"../../contents/icons\";\nimport Select from \"../select\";\nimport {\n  createMixFanCurve,\n  FanCurve,\n  MixFanCurve,\n  mixFunctions,\n} from \"./fanCurve\";\nimport FanCurveCard from \"./fanCurveCard\";\n\nexport default function MixFanCurveCard({\n  name,\n  fanCurves,\n  selectedFanCurvesDefault,\n}: {\n  name: string;\n  fanCurves: FanCurve[];\n  selectedFanCurvesDefault?: string[];\n}) {\n  const [selectedFanCurveNames, setSelectedFanCurveNames] = useState(\n    selectedFanCurvesDefault ?? fanCurves.map((x) => x.name)\n  );\n\n  const selectedFanCurves = fanCurves.filter((x) =>\n    selectedFanCurveNames.includes(x.name)\n  );\n\n  const [selectedFunction, setSelectedFunction] = useState(mixFunctions[0]);\n\n  const addFromIndex = (index: number) => {\n    let fc = fanCurves[index - 1];\n    if (!selectedFanCurveNames.includes(fc.name)) {\n      setSelectedFanCurveNames((current) => [...current, fc.name]);\n    }\n  };\n\n  const fanCurve: MixFanCurve = createMixFanCurve(\n    name,\n    selectedFunction,\n    selectedFanCurves\n  );\n\n  const suffix =\n    selectedFanCurveNames.length > 0\n      ? selectedFanCurves.find((x) => x.getValue() == fanCurve.getValue())\n          ?.name ?? \"Average\"\n      : selectedFunction.name;\n\n  return (\n    <FanCurveCard\n      iconPath={icons.svgPaths.mix}\n      fanCurve={fanCurve}\n      controlValueSuffix={` (${suffix})`}\n    >\n      <Select\n        onChange={(e) =>\n          setSelectedFunction(mixFunctions[e.target.selectedIndex])\n        }\n        value={fanCurve.selectedMixFunction.name}\n        label=\"Function\"\n      >\n        {mixFunctions.map((f) => {\n          return (\n            <option key={f.name} value={f.name}>\n              {f.name}\n            </option>\n          );\n        })}\n      </Select>\n      <Select\n        value=\"default\"\n        onChange={(e) => addFromIndex(e.target.selectedIndex)}\n        label=\"\"\n        className=\"mt-1\"\n      >\n        <option key=\"-1\" disabled value=\"default\">\n          Add a fan curve...\n        </option>\n        {fanCurves.map((fc, i) => (\n          <option key={i}>{fc.name}</option>\n        ))}\n      </Select>\n\n      {selectedFanCurves.map((x, i) => (\n        <div key={i} className=\"my-2 ml-2 text-sm\">\n          <span className=\"mr-1\">○</span> <span>{x.name}</span>\n          <span> ({x.getValue()} %)</span>\n          <button\n            onClick={() =>\n              setSelectedFanCurveNames(\n                selectedFanCurveNames.filter((f) => f != x.name)\n              )\n            }\n            className=\"float-right rounded border border-white px-1\"\n          >\n            X\n          </button>\n        </div>\n      ))}\n    </FanCurveCard>\n  );\n}\n","type TemperatureSource = {\r\n  value: number;\r\n  name: string;\r\n};\r\n\r\nfunction createTempSourceRandom(\r\n  name: string,\r\n  min: number,\r\n  max: number\r\n): TemperatureSource {\r\n  return {\r\n    name: name,\r\n    value: Math.round(Math.random() * (max - min) + min),\r\n  };\r\n}\r\n\r\nfunction createTempSource(name: string, value: number): TemperatureSource {\r\n  return {\r\n    name: name,\r\n    value: value,\r\n  };\r\n}\r\n\r\nexport type { TemperatureSource };\r\n\r\nexport { createTempSourceRandom, createTempSource };\r\n","import React from \"react\";\r\n\r\nconst NiceHeader = ({ icon, text }: { icon?: string; text: string }) => {\r\n  return (\r\n    <h2 className=\"mb-2 flex items-center text-left\">\r\n      {icon ? (\r\n        <svg className=\"mr-5 h-12 w-12\" viewBox=\"0 0 24 24\">\r\n          <path fill=\"currentColor\" d={icon} />\r\n        </svg>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      <span className=\"align-middle text-2xl font-semibold\">{text}</span>\r\n    </h2>\r\n  );\r\n};\r\n\r\nexport default NiceHeader;\r\n","import React from \"react\";\nimport { twMerge } from \"tailwind-merge\";\n\nconst defaultClassName =\n  \"text-base font-normal text-white w-full bg-transparent border-white border-spacing-1 border-b focus:text-gray-700 focus:bg-white\";\n\nexport default function (\n  props: React.DetailedHTMLProps<\n    React.SelectHTMLAttributes<HTMLSelectElement>,\n    HTMLSelectElement\n  > & { label: String }\n) {\n  const { className, label, ...restOfProps } = props;\n\n  return (\n    <>\n      <label className=\"mb-2 text-sm font-medium\">{props.label}</label>\n      <select\n        className={twMerge(defaultClassName, className)}\n        {...restOfProps}\n      ></select>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport DocSection from \"./docSection\";\nimport icons from \"../../contents/icons\";\nimport MixFanCurveCard from \"../demo/mixFanCurveCard\";\nimport {\n  createTempSource,\n  createTempSourceRandom,\n  TemperatureSource,\n} from \"../demo/temperatureSource\";\nimport { useInterval } from \"../../utilities/customHooks\";\nimport { FanCurve } from \"../demo/fanCurve\";\n\nconst parameters = {\n  hysteresis: \"Minimum temperature difference for a change to occur.\",\n  responseTime: \"Minimum time for a change to occur.\",\n  tempSource: \"Source to use as input.\",\n};\n\nconst linear: DocSection = {\n  key: \"Linear\",\n  icon: icons.svgPaths.linear,\n  render: () => (\n    <>\n      <p>\n        The linear fan curve applies a linear function based on a temperature\n        source.\n      </p>\n      <br />\n      <p>Below the minimum temperature, minimum speed is applied.</p>\n      <p>Above the maximum temperature, maximum speed is applied.</p>\n\n      <br />\n      <h2>Parameters:</h2>\n\n      <ul>\n        <li>\n          Min. and max. temperature : Temperature bounds between to interpolate\n          between.\n        </li>\n        <li>\n          Min. and max. speed : Fan speeds as % to be interpolated between the\n          min. and max. temperature.{\" \"}\n        </li>\n        <li>Temperature source: {parameters.tempSource}</li>\n        <li>Hysteresis: {parameters.hysteresis}</li>\n        <li>Response time: {parameters.responseTime}</li>\n      </ul>\n    </>\n  ),\n};\n\nconst graph: DocSection = {\n  key: \"Graph\",\n  icon: icons.svgPaths.graph,\n  render: () => {\n    return (\n      <>\n        <p>\n          The graph fan curve applies a custom drawn function based on a\n          temperature source.\n        </p>\n\n        <br />\n        <h2>Parameters:</h2>\n\n        <ul>\n          <li>Temperature source: {parameters.tempSource}</li>\n          <li>Hysteresis: {parameters.hysteresis}</li>\n          <li>Response time: {parameters.responseTime}</li>\n        </ul>\n      </>\n    );\n  },\n};\n\nconst DocDemoMixFanCurveCard = () => {\n  const updateSources = (): [TemperatureSource, TemperatureSource] => [\n    createTempSourceRandom(\"a\", 30, 70),\n    createTempSourceRandom(\"b\", 30, 70),\n  ];\n\n  const [sources, setSources] = useState([\n    createTempSource(\"a\", 50),\n    createTempSource(\"b\", 50),\n  ]);\n\n  useInterval(1000, () => {\n    setSources(updateSources());\n  });\n\n  // we mock random fan curves that outputs the temperature source as the %\n  const mockedFanCurves: FanCurve[] = [\n    { name: \"A linear fan curve\", getValue: () => sources[0].value },\n    { name: \"Graph fan curve\", getValue: () => sources[1].value },\n  ];\n\n  return (\n    <MixFanCurveCard\n      name=\"Mix demo\"\n      fanCurves={mockedFanCurves}\n      selectedFanCurvesDefault={mockedFanCurves.slice(0, 1).map((x) => x.name)}\n    ></MixFanCurveCard>\n  );\n};\n\nconst mix: DocSection = {\n  key: \"Mix\",\n  icon: icons.svgPaths.mix,\n  render: () => {\n    return (\n      <>\n        <p>\n          The mix fan curve will combine multiple existing fan curves using a\n          mix function, like max or average.\n        </p>\n\n        <div className=\"my-5\">\n          <DocDemoMixFanCurveCard />\n        </div>\n\n        <h2>Parameters:</h2>\n\n        <ul>\n          <li>Function: Choose between Max, Min, Average, Sum, Subtract.</li>\n          <li>Fan curves: Add any existing fan curve to the mix. </li>\n        </ul>\n      </>\n    );\n  },\n};\n\nexport { linear, graph, mix };\n","import { HeadFC } from \"gatsby\";\nimport React, { useRef } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport DocSection from \"../components/docs/docSection\";\nimport { graph, linear, mix } from \"../components/docs/fanCurves\";\nimport Layout from \"../components/layout\";\nimport NiceHeader from \"../components/niceHeader\";\nimport { SEO } from \"../components/seo\";\nimport * as styles from \"../styles/docs.module.css\";\n\nconst pageTitle = \"Docs\";\n\nconst c: DocSection = {\n  key: \"-c --config\",\n  render: () => {\n    return (\n      <div>\n        <div>Usage: FanControl.exe -c yourConfig.json</div>\n        <div>\n          Start using the specified config, or change the config if the software\n          is already running.\n        </div>\n      </div>\n    );\n  },\n};\n\nconst w: DocSection = {\n  key: \"-w\",\n  render: () => {\n    return <>Force the UI window to open, override the minimize option.</>;\n  },\n};\n\nconst fanCurvesSections: DocSection[] = [linear, graph, mix];\nconst commandLineArgumentsSections: DocSection[] = [c, w];\n\nconst ScrollToSection = (\n  refs: React.MutableRefObject<Map<string, HTMLDivElement | null>>,\n  section: DocSection\n) => {\n  refs.current.get(section.key)?.scrollIntoView({ behavior: \"smooth\" });\n};\n\nconst SideBarDocSection = (section: string, onClick: () => void) => {\n  return (\n    <li\n      key={section}\n      className=\"cursor-pointer rounded p-1 hover:bg-slate-200\"\n      onClick={() => onClick()}\n    >\n      {section}\n    </li>\n  );\n};\n\nconst DocSectionComponent = (\n  sections: DocSection,\n  refs: React.MutableRefObject<Map<string, HTMLDivElement | null>>\n): JSX.Element => (\n  <div key={sections.key} ref={(el) => refs.current.set(sections.key, el)}>\n    <NiceHeader icon={sections.icon} text={sections.key}></NiceHeader>\n    {sections.render()}\n  </div>\n);\n\nconst DocSidebarHeader = ({ text }: { text: string }) => (\n  <h3 className=\"my-2 font-medium underline\">{text}</h3>\n);\n\nconst DocsPage = () => {\n  const refs = useRef<Map<string, HTMLDivElement | null>>(\n    new Map<string, HTMLDivElement | null>()\n  );\n\n  return (\n    <Layout pageTitle=\"Docs\">\n      <div className=\"m-auto flex max-w-5xl p-5\">\n        {/* Left columm with elements */}\n        <div className=\"flex flex-col border-r-2 border-slate-200 pr-5\">\n          <DocSidebarHeader text=\"Fan Curves\" />\n          <ul className=\"mr-5\">\n            {fanCurvesSections.map((s) =>\n              SideBarDocSection(s.key, () => ScrollToSection(refs, s))\n            )}\n          </ul>\n\n          <DocSidebarHeader text=\"Custom Sensors\" />\n          <ul className=\"mr-5\">\n            {SideBarDocSection(\"Coming soon...\", () => {})}\n          </ul>\n\n          <DocSidebarHeader text=\"Command line arguments\" />\n          <ul className=\"mr-5\">\n            {commandLineArgumentsSections.map((s) =>\n              SideBarDocSection(s.key, () => ScrollToSection(refs, s))\n            )}\n          </ul>\n        </div>\n\n        {/* Main section with actual documentation */}\n        <div className={twMerge(styles.doc, \"ml-5 space-y-12\")}>\n          {fanCurvesSections.map((s) => DocSectionComponent(s, refs))}\n          {commandLineArgumentsSections.map((s) =>\n            DocSectionComponent(s, refs)\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default DocsPage;\n\nexport const Head: HeadFC = () => (\n  <SEO pathname={pageTitle} title={pageTitle}></SEO>\n);\n","// extracted by mini-css-extract-plugin\nexport var doc = \"docs-module--doc--5783a\";"],"names":["mixFunctions","name","invoke","fanCurves","map","x","getValue","reduce","a","b","f","length","createlinearFanCurve","selectedTemperature","sources","num","min","max","source","find","value","Math","createMixFanCurve","mixFunction","selectedMixFunction","FanCurveCard","number","path","iconPath","fanCurve","controlValueSuffix","children","React","Card","className","viewBox","fill","d","toFixed","MixFanCurveCard","selectedFanCurvesDefault","useState","selectedFanCurveNames","setSelectedFanCurveNames","selectedFanCurves","filter","includes","selectedFunction","setSelectedFunction","suffix","_selectedFanCurves$fi2","icons","Select","onChange","e","target","selectedIndex","label","key","index","fc","current","disabled","i","onClick","createTempSourceRandom","round","random","createTempSource","icon","text","props","restOfProps","twMerge","parameters","linear","render","graph","DocDemoMixFanCurveCard","setSources","useInterval","mockedFanCurves","slice","mix","pageTitle","fanCurvesSections","commandLineArgumentsSections","ScrollToSection","refs","section","get","_refs$current$get","scrollIntoView","behavior","SideBarDocSection","DocSectionComponent","sections","ref","el","set","NiceHeader","DocSidebarHeader","useRef","Map","Layout","s","Head","SEO","pathname","title"],"sourceRoot":""}