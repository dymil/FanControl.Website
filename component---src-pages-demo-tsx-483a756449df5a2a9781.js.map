{"version":3,"file":"component---src-pages-demo-tsx-483a756449df5a2a9781.js","mappings":"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","sources":["webpack://fan-control/./src/components/demo/fanCurve.tsx","webpack://fan-control/./src/components/demo/fanCurveCard.tsx","webpack://fan-control/./src/components/demo/mixFanCurveCard.tsx","webpack://fan-control/./src/components/demo/temperatureSource.ts","webpack://fan-control/./src/components/select.tsx","webpack://fan-control/./src/components/toggle.tsx","webpack://fan-control/./src/components/demo/controlCard.tsx","webpack://fan-control/./src/components/demo/temperatureCard.tsx","webpack://fan-control/./src/pages/demo.tsx"],"sourcesContent":["import { TemperatureSource } from \"./temperatureSource\";\n\ntype FanCurve = {\n  name: string;\n  getValue: () => number;\n};\n\ntype LinearFanCurve = FanCurve & {\n  selectedTemperature?: string;\n};\n\ntype MixFunction = {\n  name: string;\n  invoke: (fanCurves: FanCurve[]) => number;\n};\n\ntype MixFanCurve = FanCurve & {\n  selectedMixFunction: MixFunction;\n};\n\nconst mixFunctions: MixFunction[] = [\n  {\n    name: \"Max\",\n    invoke: (fanCurves) =>\n      fanCurves.map((x) => x.getValue()).reduce((a, b) => (a > b ? a : b), -1),\n  },\n  {\n    name: \"Min\",\n    invoke: (fanCurves) =>\n      fanCurves.map((x) => x.getValue()).reduce((a, b) => (a < b ? a : b), 101),\n  },\n  {\n    name: \"Average\",\n    invoke: (fanCurves) =>\n      fanCurves.map((f) => f.getValue()).reduce((a, b) => a + b, 0) /\n      fanCurves.length,\n  },\n];\n\nconst clamp = (num: number, min: number, max: number) =>\n  Math.min(Math.max(num, min), max);\n\nlet createlinearFanCurve = (\n  name: string,\n  selectedTemperature: string,\n  sources: TemperatureSource[]\n): LinearFanCurve => {\n  const getValue = () => {\n    let source = sources.find((x) => x.name == selectedTemperature);\n    if (source) {\n      return clamp((source.value - 30) * 3, 0, 100);\n    }\n\n    return -1;\n  };\n\n  return {\n    name,\n    selectedTemperature,\n    getValue,\n  };\n};\n\nlet createMixFanCurve = (\n  name: string,\n  mixFunction: MixFunction,\n  fanCurves: FanCurve[]\n): MixFanCurve => {\n  return {\n    name,\n    selectedMixFunction: mixFunction,\n    getValue: () => {\n      return mixFunction.invoke(fanCurves);\n    },\n  };\n};\n\nexport type { FanCurve, LinearFanCurve, MixFanCurve, MixFunction };\n\nexport { mixFunctions, createlinearFanCurve, createMixFanCurve };\n","import React from \"react\";\nimport Card from \"../card\";\nimport { FanCurve } from \"./fanCurve\";\n\nconst icon = (path: string) => (\n  <svg className=\"h-12 w-12\" viewBox=\"0 0 24 24\">\n    <path fill=\"currentColor\" d={path} />\n  </svg>\n);\n\ntype Props = {\n  iconPath: string;\n  fanCurve: FanCurve;\n  controlValueSuffix?: string;\n  children?: React.ReactNode;\n};\n\nexport default function FanCurveCard({\n  iconPath,\n  fanCurve,\n  controlValueSuffix,\n  children,\n}: Props) {\n  const background = \"bg-blue-500\";\n  const value = fanCurve.getValue();\n  const isValid = (number: number) => number >= 0 && number <= 100;\n\n  return (\n    <Card className={background}>\n      <div className=\"flex w-52 flex-col text-white\">\n        <div className=\"flex flex-row items-center justify-center\">\n          {icon(iconPath)}\n          <div className=\"ml-4 w-full border-b-2 border-white \">\n            {fanCurve.name}\n          </div>\n        </div>\n        <div>{children}</div>\n        <div className=\"mt-1 flex flex-row justify-between\">\n          <div>\n            <span>{isValid(value) ? value.toFixed(1) : \"-\"} %</span>{\" \"}\n            <span>{controlValueSuffix}</span>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport icons from \"../../contents/icons\";\nimport Select from \"../select\";\nimport {\n  createMixFanCurve,\n  FanCurve,\n  MixFanCurve,\n  MixFunction,\n  mixFunctions,\n} from \"./fanCurve\";\nimport FanCurveCard from \"./fanCurveCard\";\n\nexport default function MixFanCurveCard({\n  name,\n  fanCurves,\n  selectedFanCurvesDefault,\n}: {\n  name: string;\n  fanCurves: FanCurve[];\n  selectedFanCurvesDefault?: string[];\n}) {\n  const [selectedFanCurveNames, setSelectedFanCurveNames] = useState(\n    selectedFanCurvesDefault ?? fanCurves.map((x) => x.name)\n  );\n\n  const selectedFanCurves = fanCurves.filter((x) =>\n    selectedFanCurveNames.includes(x.name)\n  );\n\n  const [selectedFunction, setSelectedFunction] = useState(mixFunctions[0]);\n\n  const addFromIndex = (index: number) => {\n    let fc = fanCurves[index - 1];\n    if (!selectedFanCurveNames.includes(fc.name)) {\n      setSelectedFanCurveNames((current) => [...current, fc.name]);\n    }\n  };\n\n  const fanCurve: MixFanCurve = createMixFanCurve(\n    name,\n    selectedFunction,\n    selectedFanCurves\n  );\n\n  const suffix =\n    selectedFanCurveNames.length > 0\n      ? selectedFanCurves.find((x) => x.getValue() == fanCurve.getValue())\n          ?.name ?? \"Average\"\n      : selectedFunction.name;\n\n  return (\n    <FanCurveCard\n      iconPath={icons.svgPaths.mix}\n      fanCurve={fanCurve}\n      controlValueSuffix={` (${suffix})`}\n    >\n      <Select\n        onChange={(e) =>\n          setSelectedFunction(mixFunctions[e.target.selectedIndex])\n        }\n        value={fanCurve.selectedMixFunction.name}\n        label=\"Function\"\n      >\n        {mixFunctions.map((f) => {\n          return (\n            <option key={f.name} value={f.name}>\n              {f.name}\n            </option>\n          );\n        })}\n      </Select>\n      <Select\n        value=\"default\"\n        onChange={(e) => addFromIndex(e.target.selectedIndex)}\n        label=\"\"\n        className=\"mt-1\"\n      >\n        <option key=\"-1\" disabled value=\"default\">\n          Add a fan curve...\n        </option>\n        {fanCurves.map((fc, i) => (\n          <option key={i}>{fc.name}</option>\n        ))}\n      </Select>\n\n      {selectedFanCurves.map((x, i) => (\n        <div key={i} className=\"my-2 ml-2 text-sm\">\n          <span className=\"mr-1\">○</span> <span>{x.name}</span>\n          <span> ({x.getValue()} %)</span>\n          <button\n            onClick={() =>\n              setSelectedFanCurveNames(\n                selectedFanCurveNames.filter((f) => f != x.name)\n              )\n            }\n            className=\"float-right rounded border border-white px-1\"\n          >\n            X\n          </button>\n        </div>\n      ))}\n    </FanCurveCard>\n  );\n}\n","type TemperatureSource = {\n  value: number;\n  name: string;\n};\n\nfunction createTempSourceRandom(\n  name: string,\n  min: number,\n  max: number\n): TemperatureSource {\n  return {\n    name: name,\n    value: Math.round(Math.random() * (max - min) + min),\n  };\n}\n\nfunction createTempSource(name: string, value: number): TemperatureSource {\n  return {\n    name: name,\n    value: value,\n  };\n}\n\nexport type { TemperatureSource };\n\nexport { createTempSourceRandom, createTempSource };\n","import React from \"react\";\nimport { twMerge } from \"tailwind-merge\";\n\nconst defaultClassName =\n  \"text-base font-normal text-white w-full bg-transparent border-white border-spacing-1 border-b focus:text-gray-700 focus:bg-white\";\n\nexport default function (\n  props: React.DetailedHTMLProps<\n    React.SelectHTMLAttributes<HTMLSelectElement>,\n    HTMLSelectElement\n  > & { label: String }\n) {\n  const { className, label, ...restOfProps } = props;\n\n  return (\n    <>\n      <label className=\"mb-2 text-sm font-medium\">{props.label}</label>\n      <select\n        className={twMerge(defaultClassName, className)}\n        {...restOfProps}\n      ></select>\n    </>\n  );\n}\n","import * as React from \"react\";\n\ntype ToggleProps = {\n  checkedState: [boolean, React.Dispatch<React.SetStateAction<boolean>>];\n  text?: string;\n};\n\nexport default function Toggle({ checkedState, text }: ToggleProps) {\n  const [checked, setChecked] = checkedState;\n\n  const onClick = () => {\n    setChecked(!checked);\n  };\n\n  return (\n    <label className=\"relative mr-1 inline-flex cursor-pointer self-center py-1\">\n      <input\n        type=\"checkbox\"\n        className=\"peer sr-only\"\n        checked={checked}\n        readOnly\n      />\n      <div\n        onClick={onClick}\n        className=\"peer h-4 w-9 rounded-full bg-gray-200 after:absolute after:top-0.5 after:h-5 after:w-5 after:rounded-full after:border after:border-gray-300 after:bg-white after:transition-all after:content-[''] peer-checked:bg-slate-500 peer-checked:after:translate-x-full peer-checked:after:border-white peer-focus:ring-blue-300\"\n      ></div>\n      <span onClick={onClick} className=\"ml-2 select-none text-sm font-medium\">\n        {text}\n      </span>\n    </label>\n  );\n}\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport Card from \"../card\";\nimport Toggle from \"../toggle\";\nimport { FanCurve } from \"./fanCurve\";\nimport Select from \"../select\";\n\nconst icon = (\n  <svg className=\"h-12 w-12\" viewBox=\"0 0 24 24\">\n    <path\n      fill=\"currentColor\"\n      d=\"M12,16A3,3 0 0,1 9,13C9,11.88 9.61,10.9 10.5,10.39L20.21,4.77L14.68,14.35C14.18,15.33 13.17,16 12,16M12,3C13.81,3 15.5,3.5 16.97,4.32L14.87,5.53C14,5.19 13,5 12,5A8,8 0 0,0 4,13C4,15.21 4.89,17.21 6.34,18.65H6.35C6.74,19.04 6.74,19.67 6.35,20.06C5.96,20.45 5.32,20.45 4.93,20.07V20.07C3.12,18.26 2,15.76 2,13A10,10 0 0,1 12,3M22,13C22,15.76 20.88,18.26 19.07,20.07V20.07C18.68,20.45 18.05,20.45 17.66,20.06C17.27,19.67 17.27,19.04 17.66,18.65V18.65C19.11,17.2 20,15.21 20,13C20,12 19.81,11 19.46,10.1L20.67,8C21.5,9.5 22,11.18 22,13Z\"\n    />\n  </svg>\n);\n\nconst ControlCard = ({\n  name,\n  availableFanCurves,\n}: {\n  name: string;\n  availableFanCurves: FanCurve[];\n}) => {\n  const enabledState = useState(false);\n  const [enabled, _] = enabledState;\n  const background = \"bg-slate-400\";\n  const [selectedFanCurve, setSelectedFanCurve] = useState(\"\");\n\n  return (\n    <Card className={background}>\n      <div className=\"flex w-52 flex-col text-white\">\n        <div className=\"flex flex-row items-center justify-center\">\n          {icon}\n          <div className=\"ml-4 w-full border-b-2 border-white \">{name}</div>\n        </div>\n        <div className=\"mt-1 flex flex-row justify-between\">\n          <Toggle checkedState={enabledState} text=\"\"></Toggle>\n          <div className=\"w-full\">\n            <Select\n              label=\"Select a fan curve\"\n              value={selectedFanCurve}\n              onChange={(e) =>\n                setSelectedFanCurve(\n                  availableFanCurves[e.target.options.selectedIndex - 1].name\n                )\n              }\n              disabled={!enabled}\n            >\n              <option key=\"\" disabled>\n                {\"\"}\n              </option>\n              {availableFanCurves.map((fc, i) => (\n                <option key={i}>{fc.name}</option>\n              ))}\n            </Select>\n          </div>\n        </div>\n        <div className=\"mt-1 flex flex-row justify-between\">\n          <div>\n            {enabled\n              ? availableFanCurves\n                  .find((x) => x.name == selectedFanCurve)\n                  ?.getValue() ?? \"-\"\n              : \"-\"}{\" \"}\n            %\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default ControlCard;\n","import * as React from \"react\";\nimport Card from \"../card\";\nimport { TemperatureSource } from \"./temperatureSource\";\n\nconst icon = (\n  <svg className=\"h-12 w-12\" viewBox=\"0 0 24 24\">\n    <path\n      fill=\"currentColor\"\n      d=\"M15 13V5A3 3 0 0 0 9 5V13A5 5 0 1 0 15 13M12 4A1 1 0 0 1 13 5V8H11V5A1 1 0 0 1 12 4Z\"\n    />\n  </svg>\n);\n\nconst TemperatureCard = (temperatureSource: TemperatureSource) => {\n  const background = \"bg-slate-400\";\n\n  return (\n    <Card className={background}>\n      <div className=\"flex w-52 flex-col text-white\">\n        <div className=\"flex flex-row items-center justify-center\">\n          {icon}\n          <div className=\"ml-4 w-full border-b-2 border-white \">\n            {temperatureSource.name}\n          </div>\n        </div>\n        <div className=\"mt-1 flex flex-row justify-between\">\n          <div>{temperatureSource.value} deg C</div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default TemperatureCard;\n","import * as React from \"react\";\nimport type { HeadFC } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport ControlCard from \"../components/demo/controlCard\";\nimport TemperatureCard from \"../components/demo/temperatureCard\";\nimport {\n  createTempSourceRandom,\n  TemperatureSource,\n} from \"../components/demo/temperatureSource\";\nimport { useState } from \"react\";\nimport {\n  createlinearFanCurve,\n  createMixFanCurve,\n  FanCurve,\n  LinearFanCurve,\n  mixFunctions,\n} from \"../components/demo/fanCurve\";\nimport FanCurveCard from \"../components/demo/fanCurveCard\";\nimport icons from \"./../contents/icons\";\nimport { useInterval } from \"../utilities/customHooks\";\nimport MixFanCurveCard from \"../components/demo/mixFanCurveCard\";\n\nconst pageTitle = \"Demo\";\n\nconst getSources = (): TemperatureSource[] => [\n  createTempSourceRandom(\"CPU\", 30, 60),\n  createTempSourceRandom(\"GPU\", 35, 85),\n];\n\nconst getLinearFanCurves = (sources: TemperatureSource[]): LinearFanCurve[] => [\n  createlinearFanCurve(\"Linear CPU\", \"CPU\", sources),\n  createlinearFanCurve(\"Linear GPU\", \"GPU\", sources),\n];\n\nconst LinearFanCurveCard = (fanCurve: LinearFanCurve) => {\n  return (\n    <FanCurveCard\n      iconPath={icons.svgPaths.linear}\n      fanCurve={fanCurve}\n    ></FanCurveCard>\n  );\n};\n\nconst DemoPage = () => {\n  const [sources, setSources] = useState(getSources());\n\n  useInterval(1000, () => {\n    let updatedSources = getSources();\n    setSources(updatedSources);\n  });\n\n  let linears = getLinearFanCurves(sources);\n  let mix = createMixFanCurve(\"Mix\", mixFunctions[0], linears);\n  let fanCurves = [...linears, mix];\n\n  return (\n    <Layout pageTitle={pageTitle}>\n      <div className=\"flex w-full flex-col flex-wrap gap-3 \">\n        Controls\n        <div className=\"flex flex-wrap gap-3\">\n          <ControlCard name=\"Front Fan\" availableFanCurves={fanCurves} />\n          <ControlCard name=\"Top Fan\" availableFanCurves={fanCurves} />\n        </div>\n        Temperatures\n        <div className=\"flex flex-wrap gap-3\">\n          {sources.map((x, i) => (\n            <div key={i}>{TemperatureCard(x)}</div>\n          ))}\n        </div>\n        Fan Curves\n        <div className=\"flex flex-wrap gap-3\">\n          {linears.map((x, i) => (\n            <div key={i}>{LinearFanCurveCard(x)}</div>\n          ))}\n          <MixFanCurveCard name=\"Mix\" fanCurves={linears}></MixFanCurveCard>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default DemoPage;\n\nexport const Head: HeadFC = () => <title>{pageTitle}</title>;\n"],"names":["mixFunctions","name","invoke","fanCurves","map","x","getValue","reduce","a","b","f","length","createlinearFanCurve","selectedTemperature","sources","num","min","max","source","find","value","Math","createMixFanCurve","mixFunction","selectedMixFunction","FanCurveCard","number","path","iconPath","fanCurve","controlValueSuffix","children","React","Card","className","viewBox","fill","d","toFixed","MixFanCurveCard","selectedFanCurvesDefault","useState","selectedFanCurveNames","setSelectedFanCurveNames","selectedFanCurves","filter","includes","selectedFunction","setSelectedFunction","suffix","_selectedFanCurves$fi2","icons","Select","onChange","e","target","selectedIndex","label","key","index","fc","current","disabled","i","onClick","createTempSourceRandom","round","random","createTempSource","props","restOfProps","twMerge","Toggle","checkedState","text","checked","setChecked","type","readOnly","icon","availableFanCurves","enabledState","enabled","selectedFanCurve","setSelectedFanCurve","options","_availableFanCurves$f2","temperatureSource","pageTitle","getSources","setSources","useInterval","updatedSources","linears","getLinearFanCurves","mix","Layout","ControlCard","TemperatureCard","LinearFanCurveCard","Head"],"sourceRoot":""}