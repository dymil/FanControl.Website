{"version":3,"file":"component---src-pages-docs-tsx-6a4dcfbfcf7c37d39647.js","mappings":"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","sources":["webpack://fan-control/./src/components/demo/fanCurve.tsx","webpack://fan-control/./src/components/demo/fanCurveCard.tsx","webpack://fan-control/./src/components/demo/mixFanCurveCard.tsx","webpack://fan-control/./src/components/demo/temperatureSource.ts","webpack://fan-control/./src/components/niceHeader.tsx","webpack://fan-control/./src/components/select.tsx","webpack://fan-control/./src/components/docs/fanCurves.tsx","webpack://fan-control/./src/pages/docs.tsx","webpack://fan-control/./src/styles/docs.module.css"],"sourcesContent":["import { TemperatureSource } from \"./temperatureSource\";\r\n\r\ntype FanCurve = {\r\n  name: string;\r\n  getValue: () => number;\r\n};\r\n\r\ntype LinearFanCurve = FanCurve & {\r\n  selectedTemperature?: string;\r\n};\r\n\r\ntype MixFunction = {\r\n  name: string;\r\n  invoke: (fanCurves: FanCurve[]) => number;\r\n};\r\n\r\ntype MixFanCurve = FanCurve & {\r\n  selectedMixFunction: MixFunction;\r\n};\r\n\r\nconst mixFunctions: MixFunction[] = [\r\n  {\r\n    name: \"Max\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((x) => x.getValue()).reduce((a, b) => (a > b ? a : b), -1),\r\n  },\r\n  {\r\n    name: \"Min\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((x) => x.getValue()).reduce((a, b) => (a < b ? a : b), 101),\r\n  },\r\n  {\r\n    name: \"Average\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((f) => f.getValue()).reduce((a, b) => a + b, 0) /\r\n      fanCurves.length,\r\n  },\r\n];\r\n\r\nconst clamp = (num: number, min: number, max: number) =>\r\n  Math.min(Math.max(num, min), max);\r\n\r\nlet createlinearFanCurve = (\r\n  name: string,\r\n  selectedTemperature: string,\r\n  sources: TemperatureSource[]\r\n): LinearFanCurve => {\r\n  const getValue = () => {\r\n    let source = sources.find((x) => x.name == selectedTemperature);\r\n    if (source) {\r\n      return clamp((source.value - 30) * 3, 0, 100);\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  return {\r\n    name,\r\n    selectedTemperature,\r\n    getValue,\r\n  };\r\n};\r\n\r\nlet createMixFanCurve = (\r\n  name: string,\r\n  mixFunction: MixFunction,\r\n  fanCurves: FanCurve[]\r\n): MixFanCurve => {\r\n  return {\r\n    name,\r\n    selectedMixFunction: mixFunction,\r\n    getValue: () => {\r\n      return mixFunction.invoke(fanCurves);\r\n    },\r\n  };\r\n};\r\n\r\nexport type { FanCurve, LinearFanCurve, MixFanCurve, MixFunction };\r\n\r\nexport { mixFunctions, createlinearFanCurve, createMixFanCurve };\r\n","import React from \"react\";\r\nimport Card from \"../card\";\r\nimport { FanCurve } from \"./fanCurve\";\r\n\r\nconst icon = (path: string) => (\r\n  <svg className=\"h-12 w-12\" viewBox=\"0 0 24 24\">\r\n    <path fill=\"currentColor\" d={path} />\r\n  </svg>\r\n);\r\n\r\ntype Props = {\r\n  iconPath: string;\r\n  fanCurve: FanCurve;\r\n  controlValueSuffix?: string;\r\n  children?: React.ReactNode;\r\n};\r\n\r\nexport default function FanCurveCard({\r\n  iconPath,\r\n  fanCurve,\r\n  controlValueSuffix,\r\n  children,\r\n}: Props) {\r\n  const background = \"bg-primary-800\";\r\n  const value = fanCurve.getValue();\r\n  const isValid = (number: number) => number >= 0 && number <= 100;\r\n\r\n  return (\r\n    <Card className={background}>\r\n      <div className=\"flex w-56 flex-col text-white\">\r\n        <div className=\"flex flex-row items-center justify-center\">\r\n          {icon(iconPath)}\r\n          <div className=\"ml-4 w-full border-b-2 border-white \">\r\n            {fanCurve.name}\r\n          </div>\r\n        </div>\r\n        <div>{children}</div>\r\n        <div className=\"mt-1 flex flex-row justify-between\">\r\n          <div>\r\n            <span>{isValid(value) ? value.toFixed(1) : \"-\"} %</span>{\" \"}\r\n            <span>{controlValueSuffix}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport icons from \"../../contents/icons\";\r\nimport Select from \"../select\";\r\nimport {\r\n  createMixFanCurve,\r\n  FanCurve,\r\n  MixFanCurve,\r\n  mixFunctions,\r\n} from \"./fanCurve\";\r\nimport FanCurveCard from \"./fanCurveCard\";\r\n\r\nexport default function MixFanCurveCard({\r\n  name,\r\n  fanCurves,\r\n  selectedFanCurvesDefault,\r\n}: {\r\n  name: string;\r\n  fanCurves: FanCurve[];\r\n  selectedFanCurvesDefault?: string[];\r\n}) {\r\n  const [selectedFanCurveNames, setSelectedFanCurveNames] = useState(\r\n    selectedFanCurvesDefault ?? fanCurves.map((x) => x.name)\r\n  );\r\n\r\n  const selectedFanCurves = fanCurves.filter((x) =>\r\n    selectedFanCurveNames.includes(x.name)\r\n  );\r\n\r\n  const [selectedFunction, setSelectedFunction] = useState(mixFunctions[0]);\r\n\r\n  const addFromIndex = (index: number) => {\r\n    let fc = fanCurves[index - 1];\r\n    if (!selectedFanCurveNames.includes(fc.name)) {\r\n      setSelectedFanCurveNames((current) => [...current, fc.name]);\r\n    }\r\n  };\r\n\r\n  const fanCurve: MixFanCurve = createMixFanCurve(\r\n    name,\r\n    selectedFunction,\r\n    selectedFanCurves\r\n  );\r\n\r\n  const suffix =\r\n    selectedFanCurveNames.length > 0\r\n      ? selectedFanCurves.find((x) => x.getValue() == fanCurve.getValue())\r\n          ?.name ?? \"Average\"\r\n      : selectedFunction.name;\r\n\r\n  return (\r\n    <FanCurveCard\r\n      iconPath={icons.svgPaths.mix}\r\n      fanCurve={fanCurve}\r\n      controlValueSuffix={` (${suffix})`}\r\n    >\r\n      <Select\r\n        onChange={(e) =>\r\n          setSelectedFunction(mixFunctions[e.target.selectedIndex])\r\n        }\r\n        value={fanCurve.selectedMixFunction.name}\r\n        label=\"Function\"\r\n      >\r\n        {mixFunctions.map((f) => {\r\n          return (\r\n            <option key={f.name} value={f.name}>\r\n              {f.name}\r\n            </option>\r\n          );\r\n        })}\r\n      </Select>\r\n      <Select\r\n        value=\"default\"\r\n        onChange={(e) => addFromIndex(e.target.selectedIndex)}\r\n        label=\"\"\r\n        className=\"mt-1\"\r\n      >\r\n        <option key=\"-1\" disabled value=\"default\">\r\n          Add a fan curve...\r\n        </option>\r\n        {fanCurves.map((fc, i) => (\r\n          <option key={i}>{fc.name}</option>\r\n        ))}\r\n      </Select>\r\n\r\n      {selectedFanCurves.map((x, i) => (\r\n        <div key={i} className=\"my-2 ml-2 text-sm\">\r\n          <span className=\"mr-1\">○</span> <span>{x.name}</span>\r\n          <span> ({x.getValue()} %)</span>\r\n          <button\r\n            onClick={() =>\r\n              setSelectedFanCurveNames(\r\n                selectedFanCurveNames.filter((f) => f != x.name)\r\n              )\r\n            }\r\n            className=\"float-right rounded border border-white px-1\"\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </FanCurveCard>\r\n  );\r\n}\r\n","type TemperatureSource = {\r\n  value: number;\r\n  name: string;\r\n};\r\n\r\nfunction createTempSourceRandom(\r\n  name: string,\r\n  min: number,\r\n  max: number\r\n): TemperatureSource {\r\n  return {\r\n    name: name,\r\n    value: Math.round(Math.random() * (max - min) + min),\r\n  };\r\n}\r\n\r\nfunction createTempSource(name: string, value: number): TemperatureSource {\r\n  return {\r\n    name: name,\r\n    value: value,\r\n  };\r\n}\r\n\r\nexport type { TemperatureSource };\r\n\r\nexport { createTempSourceRandom, createTempSource };\r\n","import React from \"react\";\r\n\r\nconst NiceHeader = ({ icon, text }: { icon?: string; text: string }) => {\r\n  return (\r\n    <h2 className=\"mb-2 flex items-center text-left\">\r\n      {icon ? (\r\n        <svg className=\"mr-5 h-12 w-12\" viewBox=\"0 0 24 24\">\r\n          <path fill=\"currentColor\" d={icon} />\r\n        </svg>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      <span className=\"align-middle text-2xl font-medium\">{text}</span>\r\n    </h2>\r\n  );\r\n};\r\n\r\nexport default NiceHeader;\r\n","import React from \"react\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nconst defaultClassName =\r\n  \"text-base font-normal text-white w-full bg-transparent border-white border-spacing-1 border-b focus:text-gray-700 focus:bg-white\";\r\n\r\nexport default function (\r\n  props: React.DetailedHTMLProps<\r\n    React.SelectHTMLAttributes<HTMLSelectElement>,\r\n    HTMLSelectElement\r\n  > & { label: String }\r\n) {\r\n  const { className, label, ...restOfProps } = props;\r\n\r\n  return (\r\n    <>\r\n      <label className=\"mb-2 text-sm font-medium\">{props.label}</label>\r\n      <select\r\n        className={twMerge(defaultClassName, className)}\r\n        {...restOfProps}\r\n      ></select>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport DocSection from \"./docSection\";\r\nimport icons from \"../../contents/icons\";\r\nimport MixFanCurveCard from \"../demo/mixFanCurveCard\";\r\nimport {\r\n  createTempSource,\r\n  createTempSourceRandom,\r\n  TemperatureSource,\r\n} from \"../demo/temperatureSource\";\r\nimport { useInterval } from \"../../utilities/customHooks\";\r\nimport { FanCurve } from \"../demo/fanCurve\";\r\n\r\nconst parameters = {\r\n  hysteresis: \"Minimum temperature difference for a change to occur.\",\r\n  responseTime: \"Minimum time for a change to occur.\",\r\n  tempSource: \"Source to use as input.\",\r\n};\r\n\r\nconst linear: DocSection = {\r\n  key: \"Linear\",\r\n  icon: icons.svgPaths.linear,\r\n  render: () => (\r\n    <>\r\n      <p>\r\n        The linear fan curve applies a linear function based on a temperature\r\n        source.\r\n      </p>\r\n      <br />\r\n      <p>Below the minimum temperature, minimum speed is applied.</p>\r\n      <p>Above the maximum temperature, maximum speed is applied.</p>\r\n\r\n      <br />\r\n      <h2>Parameters:</h2>\r\n\r\n      <ul>\r\n        <li>\r\n          Min. and max. temperature : Temperature bounds between to interpolate\r\n          between.\r\n        </li>\r\n        <li>\r\n          Min. and max. speed : Fan speeds as % to be interpolated between the\r\n          min. and max. temperature.{\" \"}\r\n        </li>\r\n        <li>Temperature source: {parameters.tempSource}</li>\r\n        <li>Hysteresis: {parameters.hysteresis}</li>\r\n        <li>Response time: {parameters.responseTime}</li>\r\n      </ul>\r\n    </>\r\n  ),\r\n};\r\n\r\nconst graph: DocSection = {\r\n  key: \"Graph\",\r\n  icon: icons.svgPaths.graph,\r\n  render: () => {\r\n    return (\r\n      <>\r\n        <p>\r\n          The graph fan curve applies a custom drawn function based on a\r\n          temperature source.\r\n        </p>\r\n\r\n        <br />\r\n        \r\n        <p>\r\n          Press \"Edit\" to open up the editor. Left click to add a point, right\r\n          click to remove one. Hover your mouse over a point and use the\r\n          \"Selected Point\" input boxes to precisely change its location.\r\n        </p>\r\n\r\n        <br />\r\n        <h2>Parameters:</h2>\r\n\r\n        <ul>\r\n          <li>Temperature source: {parameters.tempSource}</li>\r\n          <li>Hysteresis: {parameters.hysteresis}</li>\r\n          <li>Response time: {parameters.responseTime}</li>\r\n        </ul>\r\n      </>\r\n    );\r\n  },\r\n};\r\n\r\nconst DocDemoMixFanCurveCard = () => {\r\n  const updateSources = (): [TemperatureSource, TemperatureSource] => [\r\n    createTempSourceRandom(\"a\", 30, 70),\r\n    createTempSourceRandom(\"b\", 30, 70),\r\n  ];\r\n\r\n  const [sources, setSources] = useState([\r\n    createTempSource(\"a\", 50),\r\n    createTempSource(\"b\", 50),\r\n  ]);\r\n\r\n  useInterval(1000, () => {\r\n    setSources(updateSources());\r\n  });\r\n\r\n  // we mock random fan curves that outputs the temperature source as the %\r\n  const mockedFanCurves: FanCurve[] = [\r\n    { name: \"A linear fan curve\", getValue: () => sources[0].value },\r\n    { name: \"Graph fan curve\", getValue: () => sources[1].value },\r\n  ];\r\n\r\n  return (\r\n    <MixFanCurveCard\r\n      name=\"Mix demo\"\r\n      fanCurves={mockedFanCurves}\r\n      selectedFanCurvesDefault={mockedFanCurves.slice(0, 1).map((x) => x.name)}\r\n    ></MixFanCurveCard>\r\n  );\r\n};\r\n\r\nconst mix: DocSection = {\r\n  key: \"Mix\",\r\n  icon: icons.svgPaths.mix,\r\n  render: () => {\r\n    return (\r\n      <>\r\n        <p>\r\n          The mix fan curve will combine multiple existing fan curves using a\r\n          mix function, like max or average.\r\n        </p>\r\n\r\n        <div className=\"my-5\">\r\n          <DocDemoMixFanCurveCard />\r\n        </div>\r\n\r\n        <h2>Parameters:</h2>\r\n\r\n        <ul>\r\n          <li>Function: Choose between Max, Min, Average, Sum, Subtract.</li>\r\n          <li>Fan curves: Add any existing fan curve to the mix. </li>\r\n        </ul>\r\n      </>\r\n    );\r\n  },\r\n};\r\n\r\nexport { linear, graph, mix };\r\n","import { HeadFC } from \"gatsby\";\r\nimport React, { useRef } from \"react\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport DocSection from \"../components/docs/docSection\";\r\nimport { graph, linear, mix } from \"../components/docs/fanCurves\";\r\nimport Layout from \"../components/layout\";\r\nimport NiceHeader from \"../components/niceHeader\";\r\nimport { SEO } from \"../components/seo\";\r\nimport * as styles from \"../styles/docs.module.css\";\r\n\r\nconst pageTitle = \"Docs\";\r\n\r\nconst c: DocSection = {\r\n  key: \"-c --config\",\r\n  render: () => {\r\n    return (\r\n      <div>\r\n        <div>Usage: FanControl.exe -c yourConfig.json</div>\r\n        <div>\r\n          Start using the specified config, or change the config if the software\r\n          is already running.\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n};\r\n\r\nconst w: DocSection = {\r\n  key: \"-w\",\r\n  render: () => {\r\n    return <>Force the UI window to open, override the minimize option.</>;\r\n  },\r\n};\r\n\r\nconst fanCurvesSections: DocSection[] = [linear, graph, mix];\r\nconst commandLineArgumentsSections: DocSection[] = [c, w];\r\n\r\nconst ScrollToSection = (\r\n  refs: React.MutableRefObject<Map<string, HTMLDivElement | null>>,\r\n  section: DocSection\r\n) => {\r\n  refs.current.get(section.key)?.scrollIntoView({ behavior: \"smooth\" });\r\n};\r\n\r\nconst SideBarDocSection = (section: string, onClick: () => void) => {\r\n  return (\r\n    <li\r\n      key={section}\r\n      className=\"cursor-pointer rounded p-1 hover:bg-body-200\"\r\n      onClick={() => onClick()}\r\n    >\r\n      {section}\r\n    </li>\r\n  );\r\n};\r\n\r\nconst DocSectionComponent = (\r\n  sections: DocSection,\r\n  refs: React.MutableRefObject<Map<string, HTMLDivElement | null>>\r\n): JSX.Element => (\r\n  <div key={sections.key} ref={(el) => refs.current.set(sections.key, el)}>\r\n    <NiceHeader icon={sections.icon} text={sections.key}></NiceHeader>\r\n    {sections.render()}\r\n  </div>\r\n);\r\n\r\nconst DocSidebarHeader = ({ text }: { text: string }) => (\r\n  <h3 className=\"my-2 font-medium underline\">{text}</h3>\r\n);\r\n\r\nconst DocHeader = ({text}: {text:string}) => {\r\n  return <h2 className=\"text-4xl self-center mx-auto text-left font-semibold\">{text}</h2>\r\n}\r\n\r\nconst DocsPage = () => {\r\n  const refs = useRef<Map<string, HTMLDivElement | null>>(\r\n    new Map<string, HTMLDivElement | null>()\r\n  );\r\n\r\n  return (\r\n    <Layout pageTitle=\"Docs\">\r\n      <div className=\"m-auto flex max-w-5xl p-5\">\r\n        {/* Left columm with elements */}\r\n        <div className=\"flex flex-col border-r-2 border-body-200 pr-5\">\r\n          <DocSidebarHeader text=\"Fan Curves\" />\r\n          <ul className=\"mr-5\">\r\n            {fanCurvesSections.map((s) =>\r\n              SideBarDocSection(s.key, () => ScrollToSection(refs, s))\r\n            )}\r\n          </ul>\r\n\r\n          <DocSidebarHeader text=\"Custom Sensors\" />\r\n          <ul className=\"mr-5\">\r\n            {SideBarDocSection(\"Coming soon...\", () => {})}\r\n          </ul>\r\n\r\n          <DocSidebarHeader text=\"Command line arguments\" />\r\n          <ul className=\"mr-5\">\r\n            {commandLineArgumentsSections.map((s) =>\r\n              SideBarDocSection(s.key, () => ScrollToSection(refs, s))\r\n            )}\r\n          </ul>\r\n        </div>\r\n\r\n        {/* Main section with actual documentation */}\r\n        <div className={twMerge(styles.doc, \"ml-5 space-y-12\")}>\r\n          <DocHeader text=\"Fan Curves\"/>\r\n          {fanCurvesSections.map((s) => DocSectionComponent(s, refs))}\r\n          <DocHeader text=\"Command line arguments\"/>\r\n          {commandLineArgumentsSections.map((s) =>\r\n            DocSectionComponent(s, refs)\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default DocsPage;\r\n\r\nexport const Head: HeadFC = () => (\r\n  <SEO pathname={pageTitle} title={pageTitle}></SEO>\r\n);\r\n","// extracted by mini-css-extract-plugin\nexport var doc = \"docs-module--doc--5783a\";"],"names":["mixFunctions","name","invoke","fanCurves","map","x","getValue","reduce","a","b","f","length","createlinearFanCurve","selectedTemperature","sources","num","min","max","source","find","value","Math","createMixFanCurve","mixFunction","selectedMixFunction","FanCurveCard","number","path","iconPath","fanCurve","controlValueSuffix","children","React","Card","className","viewBox","fill","d","toFixed","MixFanCurveCard","selectedFanCurvesDefault","useState","selectedFanCurveNames","setSelectedFanCurveNames","selectedFanCurves","filter","includes","selectedFunction","setSelectedFunction","suffix","_selectedFanCurves$fi2","icons","Select","onChange","e","target","selectedIndex","label","key","index","fc","current","disabled","i","onClick","createTempSourceRandom","round","random","createTempSource","icon","text","props","restOfProps","twMerge","parameters","linear","render","graph","DocDemoMixFanCurveCard","setSources","useInterval","mockedFanCurves","slice","mix","pageTitle","fanCurvesSections","commandLineArgumentsSections","ScrollToSection","refs","section","get","_refs$current$get","scrollIntoView","behavior","SideBarDocSection","DocSectionComponent","sections","ref","el","set","NiceHeader","DocSidebarHeader","DocHeader","useRef","Map","Layout","s","Head","SEO","pathname","title"],"sourceRoot":""}