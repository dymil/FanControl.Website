{"version":3,"file":"component---src-pages-docs-tsx-b1fbe427a4fd79da745e.js","mappings":"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","sources":["webpack://fan-control/./node_modules/core-js/modules/es.array.flat.js","webpack://fan-control/./node_modules/core-js/modules/es.array.unscopables.flat.js","webpack://fan-control/./src/components/demo/fanCurve.tsx","webpack://fan-control/./src/components/demo/fanCurveCard.tsx","webpack://fan-control/./src/components/demo/mixFanCurveCard.tsx","webpack://fan-control/./src/components/demo/temperatureSource.ts","webpack://fan-control/./src/components/icon.tsx","webpack://fan-control/./src/components/niceHeader.tsx","webpack://fan-control/./src/components/select.tsx","webpack://fan-control/./src/components/docs/docSection.tsx","webpack://fan-control/./src/components/docs/customSensors.tsx","webpack://fan-control/./src/components/docs/fanCurves.tsx","webpack://fan-control/./src/pages/docs.tsx","webpack://fan-control/./src/styles/docs.module.css"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flat` method\n// https://tc39.es/ecma262/#sec-array.prototype.flat\n$({ target: 'Array', proto: true }, {\n  flat: function flat(/* depthArg = 1 */) {\n    var depthArg = arguments.length ? arguments[0] : undefined;\n    var O = toObject(this);\n    var sourceLen = lengthOfArrayLike(O);\n    var A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity(depthArg));\n    return A;\n  }\n});\n","// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flat');\n","import { TemperatureSource } from \"./temperatureSource\";\r\n\r\ntype FanCurve = {\r\n  name: string;\r\n  getValue: () => number;\r\n};\r\n\r\ntype LinearFanCurve = FanCurve & {\r\n  selectedTemperature?: string;\r\n};\r\n\r\ntype MixFunction = {\r\n  name: string;\r\n  invoke: (fanCurves: FanCurve[]) => number;\r\n};\r\n\r\ntype MixFanCurve = FanCurve & {\r\n  selectedMixFunction: MixFunction;\r\n};\r\n\r\nconst mixFunctions: MixFunction[] = [\r\n  {\r\n    name: \"Max\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((x) => x.getValue()).reduce((a, b) => (a > b ? a : b), -1),\r\n  },\r\n  {\r\n    name: \"Min\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((x) => x.getValue()).reduce((a, b) => (a < b ? a : b), 101),\r\n  },\r\n  {\r\n    name: \"Average\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((f) => f.getValue()).reduce((a, b) => a + b, 0) /\r\n      fanCurves.length,\r\n  },\r\n];\r\n\r\nconst clamp = (num: number, min: number, max: number) =>\r\n  Math.min(Math.max(num, min), max);\r\n\r\nlet createlinearFanCurve = (\r\n  name: string,\r\n  selectedTemperature: string,\r\n  sources: TemperatureSource[]\r\n): LinearFanCurve => {\r\n  const getValue = () => {\r\n    let source = sources.find((x) => x.name == selectedTemperature);\r\n    if (source) {\r\n      return clamp((source.value - 30) * 3, 0, 100);\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  return {\r\n    name,\r\n    selectedTemperature,\r\n    getValue,\r\n  };\r\n};\r\n\r\nlet createMixFanCurve = (\r\n  name: string,\r\n  mixFunction: MixFunction,\r\n  fanCurves: FanCurve[]\r\n): MixFanCurve => {\r\n  return {\r\n    name,\r\n    selectedMixFunction: mixFunction,\r\n    getValue: () => {\r\n      return mixFunction.invoke(fanCurves);\r\n    },\r\n  };\r\n};\r\n\r\nexport type { FanCurve, LinearFanCurve, MixFanCurve, MixFunction };\r\n\r\nexport { mixFunctions, createlinearFanCurve, createMixFanCurve };\r\n","import React from \"react\";\nimport Card from \"../card\";\nimport { FanCurve } from \"./fanCurve\";\n\nconst icon = (path: string) => (\n  <svg className=\"h-12 w-12\" viewBox=\"0 0 24 24\">\n    <path fill=\"currentColor\" d={path} />\n  </svg>\n);\n\ntype Props = {\n  iconPath: string;\n  fanCurve: FanCurve;\n  controlValueSuffix?: string;\n  children?: React.ReactNode;\n};\n\nexport default function FanCurveCard({\n  iconPath,\n  fanCurve,\n  controlValueSuffix,\n  children,\n}: Props) {\n  const background = \"bg-primary-800\";\n  const value = fanCurve.getValue();\n  const isValid = (number: number) => number >= 0 && number <= 100;\n\n  return (\n    <Card className={background}>\n      <div className=\"flex w-56 flex-col text-white\">\n        <div className=\"flex flex-row items-center justify-center\">\n          {icon(iconPath)}\n          <div className=\"ml-4 w-full border-b-2 border-white \">\n            {fanCurve.name}\n          </div>\n        </div>\n        <div>{children}</div>\n        <div className=\"mt-1 flex flex-row justify-between\">\n          <div>\n            <span>{isValid(value) ? value.toFixed(1) : \"-\"} %</span>{\" \"}\n            <span>{controlValueSuffix}</span>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport icons from \"../../contents/icons\";\nimport Select from \"../select\";\nimport {\n  createMixFanCurve,\n  FanCurve,\n  MixFanCurve,\n  mixFunctions,\n} from \"./fanCurve\";\nimport FanCurveCard from \"./fanCurveCard\";\n\nexport default function MixFanCurveCard({\n  name,\n  fanCurves,\n  selectedFanCurvesDefault,\n}: {\n  name: string;\n  fanCurves: FanCurve[];\n  selectedFanCurvesDefault?: string[];\n}) {\n  const [selectedFanCurveNames, setSelectedFanCurveNames] = useState(\n    selectedFanCurvesDefault ?? fanCurves.map((x) => x.name)\n  );\n\n  const selectedFanCurves = fanCurves.filter((x) =>\n    selectedFanCurveNames.includes(x.name)\n  );\n\n  const [selectedFunction, setSelectedFunction] = useState(mixFunctions[0]);\n\n  const addFromIndex = (index: number) => {\n    let fc = fanCurves[index - 1];\n    if (!selectedFanCurveNames.includes(fc.name)) {\n      setSelectedFanCurveNames((current) => [...current, fc.name]);\n    }\n  };\n\n  const fanCurve: MixFanCurve = createMixFanCurve(\n    name,\n    selectedFunction,\n    selectedFanCurves\n  );\n\n  const suffix =\n    selectedFanCurveNames.length > 0\n      ? selectedFanCurves.find((x) => x.getValue() == fanCurve.getValue())\n          ?.name ?? \"Average\"\n      : selectedFunction.name;\n\n  return (\n    <FanCurveCard\n      iconPath={icons.svgPaths.mix}\n      fanCurve={fanCurve}\n      controlValueSuffix={` (${suffix})`}\n    >\n      <Select\n        onChange={(e) =>\n          setSelectedFunction(mixFunctions[e.target.selectedIndex])\n        }\n        value={fanCurve.selectedMixFunction.name}\n        label=\"Function\"\n      >\n        {mixFunctions.map((f) => {\n          return (\n            <option key={f.name} value={f.name}>\n              {f.name}\n            </option>\n          );\n        })}\n      </Select>\n      <Select\n        value=\"default\"\n        onChange={(e) => addFromIndex(e.target.selectedIndex)}\n        label=\"\"\n        className=\"mt-1\"\n      >\n        <option key=\"-1\" disabled value=\"default\">\n          Add a fan curve...\n        </option>\n        {fanCurves.map((fc, i) => (\n          <option key={i}>{fc.name}</option>\n        ))}\n      </Select>\n\n      {selectedFanCurves.map((x, i) => (\n        <div key={i} className=\"my-2 ml-2 text-sm\">\n          <span className=\"mr-1\">○</span> <span>{x.name}</span>\n          <span> ({x.getValue()} %)</span>\n          <button\n            onClick={() =>\n              setSelectedFanCurveNames(\n                selectedFanCurveNames.filter((f) => f != x.name)\n              )\n            }\n            className=\"float-right rounded border border-white px-1\"\n          >\n            X\n          </button>\n        </div>\n      ))}\n    </FanCurveCard>\n  );\n}\n","type TemperatureSource = {\r\n  value: number;\r\n  name: string;\r\n};\r\n\r\nfunction createTempSourceRandom(\r\n  name: string,\r\n  min: number,\r\n  max: number\r\n): TemperatureSource {\r\n  return {\r\n    name: name,\r\n    value: Math.round(Math.random() * (max - min) + min),\r\n  };\r\n}\r\n\r\nfunction createTempSource(name: string, value: number): TemperatureSource {\r\n  return {\r\n    name: name,\r\n    value: value,\r\n  };\r\n}\r\n\r\nexport type { TemperatureSource };\r\n\r\nexport { createTempSourceRandom, createTempSource };\r\n","import React from \"react\";\r\n\r\nconst BigIcon = (path: string) => (\r\n  <svg className=\"h-12 w-12\" viewBox=\"0 0 24 24\">\r\n    <path fill=\"currentColor\" d={path} />\r\n  </svg>\r\n);\r\n\r\nconst Icon = (path: string) => (\r\n  <svg className=\"h-8 w-8\" viewBox=\"0 0 24 24\">\r\n    <path fill=\"currentColor\" d={path} />\r\n  </svg>\r\n);\r\n\r\nconst SmallIcon = (path: string) => (\r\n  <svg className=\"h-5 w-5\" viewBox=\"0 0 24 24\">\r\n    <path fill=\"currentColor\" d={path} />\r\n  </svg>\r\n);\r\n\r\n\r\nexport { BigIcon, Icon, SmallIcon };\r\n","import React from \"react\";\r\n\r\nconst NiceHeader = ({ icon, text }: { icon?: string; text: string }) => {\r\n  return (\r\n    <h2 className=\"mb-2 flex items-center text-left\">\r\n      {icon ? (\r\n        <svg className=\"mr-5 h-12 w-12\" viewBox=\"0 0 24 24\">\r\n          <path fill=\"currentColor\" d={icon} />\r\n        </svg>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      <span className=\"align-middle text-2xl font-medium\">{text}</span>\r\n    </h2>\r\n  );\r\n};\r\n\r\nexport default NiceHeader;\r\n","import React from \"react\";\nimport { twMerge } from \"tailwind-merge\";\n\nconst defaultClassName =\n  \"text-base font-normal text-white w-full bg-transparent border-white border-spacing-1 border-b focus:text-gray-700 focus:bg-white\";\n\nexport default function (\n  props: React.DetailedHTMLProps<\n    React.SelectHTMLAttributes<HTMLSelectElement>,\n    HTMLSelectElement\n  > & { label: String }\n) {\n  const { className, label, ...restOfProps } = props;\n\n  return (\n    <>\n      <label className=\"mb-2 text-sm font-medium\">{props.label}</label>\n      <select\n        className={twMerge(defaultClassName, className)}\n        {...restOfProps}\n      ></select>\n    </>\n  );\n}\n","export type DocSection = {\r\n  key: string;\r\n  icon?: string;\r\n  render: () => JSX.Element;\r\n};\r\n\r\nexport const parameters = {\r\n  hysteresis: \"Minimum temperature difference for a change to occur.\",\r\n  responseTime: \"Minimum time for a change to occur.\",\r\n  tempSource: \"Source to use as input.\",\r\n  functions: \"Choose between Max, Min, Average, Sum, Subtract.\"\r\n};","import React, { useState } from \"react\";\nimport { DocSection, parameters } from \"./docSection\";\nimport icons from \"../../contents/icons\";\n\nconst timeAverage: DocSection = {\n  key: \"Time Average\",\n  icon: icons.svgPaths.time,\n  render: () => {\n    return (\n      <>\n        <p>\n          The time average custom sensor averages the selected sensor over a set\n          ammount of time.\n        </p>\n        <br />\n        <h2>Parameters:</h2>\n\n        <ul>\n          <li>Temperature source: {parameters.tempSource}</li>\n          <li>Time: Averaging period of the selected temperature source.</li>\n        </ul>\n      </>\n    );\n  },\n};\n\nconst mixSensor: DocSection = {\n  key: \"Mix\",\n  icon: icons.svgPaths.temperature,\n  render: () => {\n    return (\n      <>\n        <p>\n          The mix custom sensor applies a function to the selected temperature\n          sensors.\n        </p>\n        <br />\n\n        <h2>Parameters:</h2>\n\n        <ul>\n          <li>Function: {parameters.functions}</li>\n          <li>Add sensor: Add any existing temperature sensor to the mix. </li>\n        </ul>\n      </>\n    );\n  },\n};\n\nconst fileSensor: DocSection = {\n  key: \"File\",\n  icon: icons.svgPaths.file,\n  render: () => {\n    return (\n      <>\n        <p>\n          The file custom sensor reads data from a given file. The temperature\n          must be written directly into the \".sensor\" file as text in celcius on the first\n          line. Use this sensor as a way to inject a sensor from any other source that the software doesn't support natively.\n        </p>\n        <br />\n\n        <h2>Parameters:</h2>\n\n        <ul>\n          <li>Path: Path of the sensor file.</li>\n        </ul>\n      </>\n    );\n  },\n};\n\nexport { timeAverage, mixSensor, fileSensor };\n","import React, { useState } from \"react\";\nimport { DocSection, parameters } from \"./docSection\";\nimport icons from \"../../contents/icons\";\nimport MixFanCurveCard from \"../demo/mixFanCurveCard\";\nimport {\n  createTempSource,\n  createTempSourceRandom,\n  TemperatureSource,\n} from \"../demo/temperatureSource\";\nimport { useInterval } from \"../../utilities/customHooks\";\nimport { FanCurve } from \"../demo/fanCurve\";\n\nconst linear: DocSection = {\n  key: \"Linear\",\n  icon: icons.svgPaths.linear,\n  render: () => (\n    <>\n      <p>\n        The linear fan curve applies a linear function based on a temperature\n        source.\n      </p>\n      <br />\n      <p>Below the minimum temperature, minimum speed is applied.</p>\n      <p>Above the maximum temperature, maximum speed is applied.</p>\n\n      <br />\n      <h2>Parameters:</h2>\n\n      <ul>\n        <li>\n          Min. and max. temperature : Temperature bounds between to interpolate\n          between.\n        </li>\n        <li>\n          Min. and max. speed : Fan speeds as % to be interpolated between the\n          min. and max. temperature.{\" \"}\n        </li>\n        <li>Temperature source: {parameters.tempSource}</li>\n        <li>Hysteresis: {parameters.hysteresis}</li>\n        <li>Response time: {parameters.responseTime}</li>\n      </ul>\n    </>\n  ),\n};\n\nconst graph: DocSection = {\n  key: \"Graph\",\n  icon: icons.svgPaths.graph,\n  render: () => {\n    return (\n      <>\n        <p>\n          The graph fan curve applies a custom drawn function based on a\n          temperature source.\n        </p>\n\n        <br />\n\n        <p>\n          Press \"Edit\" to open up the editor. Left click to add a point, right\n          click to remove one. Hover your mouse over a point and use the\n          \"Selected Point\" input boxes to precisely change its location.\n        </p>\n\n        <br />\n        <h2>Parameters:</h2>\n\n        <ul>\n          <li>Temperature source: {parameters.tempSource}</li>\n          <li>Hysteresis: {parameters.hysteresis}</li>\n          <li>Response time: {parameters.responseTime}</li>\n        </ul>\n      </>\n    );\n  },\n};\n\nconst DocDemoMixFanCurveCard = () => {\n  const updateSources = (): [TemperatureSource, TemperatureSource] => [\n    createTempSourceRandom(\"a\", 30, 70),\n    createTempSourceRandom(\"b\", 30, 70),\n  ];\n\n  const [sources, setSources] = useState([\n    createTempSource(\"a\", 50),\n    createTempSource(\"b\", 50),\n  ]);\n\n  useInterval(1000, () => {\n    setSources(updateSources());\n  });\n\n  // we mock random fan curves that outputs the temperature source as the %\n  const mockedFanCurves: FanCurve[] = [\n    { name: \"A linear fan curve\", getValue: () => sources[0].value },\n    { name: \"Graph fan curve\", getValue: () => sources[1].value },\n  ];\n\n  return (\n    <MixFanCurveCard\n      name=\"Mix demo\"\n      fanCurves={mockedFanCurves}\n      selectedFanCurvesDefault={mockedFanCurves.slice(0, 1).map((x) => x.name)}\n    ></MixFanCurveCard>\n  );\n};\n\nconst flat: DocSection = {\n  key: \"Flat\",\n  icon: icons.svgPaths.flat,\n  render: () => {\n    return (\n      <>\n        <p>\n          The flat fan curve simply applies a fixed %. Usefull if you want to\n          set and change the % of multiple controls.\n        </p>\n        <br/>\n        <h2>Parameters:</h2>\n\n        <ul>\n          <li>Fan speed %: Percent.</li>\n        </ul>\n      </>\n    );\n  },\n};\n\nconst sync: DocSection = {\n  key: \"Sync\",\n  icon: icons.svgPaths.sync,\n  render: () => {\n    return (\n      <>\n        <p>\n          The sync fan curve will output the same % as the selected control. Use\n          it to sync multiple fans to a single control. Whatever fan curve you\n          apply to that control, all the synced fans will also follow that new\n          fan curve.\n        </p>\n        <br/>\n        <h2>Parameters:</h2>\n\n        <ul>\n          <li>Selected control: The control to sync with.</li>\n          <li>Offset: Offset in % to be applied to the selected control.</li>\n        </ul>\n      </>\n    );\n  },\n};\n\nconst trigger: DocSection = {\n  key: \"Trigger\",\n  icon: icons.svgPaths.trigger,\n  render: () => {\n    return (\n      <>\n        <p>\n          The trigger fan curve will hold its fan speed until one of the two\n          changing point is triggered. Below the idle temperature, idle fan\n          speed is applied until the temperature gets back up to the load\n          temperature. Above the load temperature, load fan speed is applied\n          until the temperature gets back down to the idle temperature.\n        </p>\n        <br/>\n        <h2>Parameters:</h2>\n\n        <ul>\n          <li>Response Time: {parameters.responseTime}</li>\n        </ul>\n      </>\n    );\n  },\n};\n\nconst mix: DocSection = {\n  key: \"Mix\",\n  icon: icons.svgPaths.mix,\n  render: () => {\n    return (\n      <>\n        <p>\n          The mix fan curve will combine multiple existing fan curves using a\n          mix function, like max or average.\n        </p>\n\n        <div className=\"my-5\">\n          <DocDemoMixFanCurveCard />\n        </div>\n\n        <h2>Parameters:</h2>\n\n        <ul>\n          <li>Function: Choose between Max, Min, Average, Sum, Subtract.</li>\n          <li>Fan curves: Add any existing fan curve to the mix. </li>\n        </ul>\n      </>\n    );\n  },\n};\n\n\nexport { linear, graph, mix, trigger, flat, sync };\n","import { HeadFC } from \"gatsby\";\nimport React, { useRef } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mixSensor, timeAverage, fileSensor } from \"../components/docs/customSensors\";\nimport { DocSection } from \"../components/docs/docSection\";\nimport {\n  graph,\n  linear,\n  mix,\n  trigger,\n  flat,\n  sync,\n} from \"../components/docs/fanCurves\";\nimport { SmallIcon } from \"../components/icon\";\nimport Layout from \"../components/layout\";\nimport NiceHeader from \"../components/niceHeader\";\nimport { SEO } from \"../components/seo\";\nimport * as styles from \"../styles/docs.module.css\";\n\nconst pageTitle = \"Docs\";\n\nconst c: DocSection = {\n  key: \"-c --config\",\n  render: () => {\n    return (\n      <div>\n        <div>Usage: FanControl.exe -c yourConfig.json</div>\n        <div>\n          Start using the specified config, or change the config if the software\n          is already running.\n        </div>\n      </div>\n    );\n  },\n};\n\nconst w: DocSection = {\n  key: \"-w\",\n  render: () => {\n    return <>Force the UI window to open, override the minimize option.</>;\n  },\n};\n\nconst fanCurveSections: DocSection[] = [\n  linear,\n  graph,\n  mix,\n  trigger,\n  flat,\n  sync,\n];\n\nconst customSensorSections: DocSection[] = [timeAverage, mixSensor, fileSensor];\n\nconst commandLineArgumentSections: DocSection[] = [c, w];\n\nconst ScrollToSection = (\n  refs: React.MutableRefObject<Map<string, HTMLDivElement | null>>,\n  section: DocSection\n) => {\n  const htmlItem = refs.current.get(section.key);\n  if (htmlItem) {\n    const top = htmlItem.getBoundingClientRect().top - 50;\n    window.scrollTo({ top: top, behavior: \"smooth\" });\n  }\n};\n\nconst SideBarDocSection = (section: DocSection, onClick: () => void) => {\n  return (\n    <li\n      key={section.key}\n      className=\"cursor-pointer rounded p-1 hover:bg-body-200\"\n      onClick={() => onClick()}\n    >\n      <div className=\"flex items-center\">\n        { section.icon ? SmallIcon(section.icon) : \"\" }\n        <span className=\"ml-2 align-middle\">{section.key}</span>\n      </div>\n    </li>\n  );\n};\n\nconst DocSectionComponent = (\n  sections: DocSection,\n  refs: React.MutableRefObject<Map<string, HTMLDivElement | null>>\n): JSX.Element => (\n  <div key={sections.key} ref={(el) => refs.current.set(sections.key, el)}>\n    <NiceHeader icon={sections.icon} text={sections.key}></NiceHeader>\n    {sections.render()}\n  </div>\n);\n\nconst DocSidebarHeader = ({ text }: { text: string }) => (\n  <h3 className=\"mb-2 font-medium underline\">{text}</h3>\n);\n\nconst DocHeader = ({ text }: { text: string }) => {\n  return (\n    <h2 className=\"mx-auto self-center text-left text-4xl font-semibold\">\n      {text}\n    </h2>\n  );\n};\n\nconst DocsPage = () => {\n  const refs = useRef<Map<string, HTMLDivElement | null>>(\n    new Map<string, HTMLDivElement | null>()\n  );\n\n  return (\n    <Layout pageTitle=\"Docs\">\n      <div className=\"m-auto flex max-w-6xl p-5\">\n        {/* Left columm with elements */}\n        <div className=\"flex flex-col border-r-2 border-body-200 pr-5\">\n          <DocSidebarHeader text=\"Fan Curves\" />\n          <ul className=\"mr-5 mb-5\">\n            {fanCurveSections.map((s) =>\n              SideBarDocSection(s, () => ScrollToSection(refs, s))\n            )}\n          </ul>\n\n          <DocSidebarHeader text=\"Custom Sensors\" />\n          <ul className=\"mr-5 mb-5\">\n            {customSensorSections.map((s) =>\n              SideBarDocSection(s, () => ScrollToSection(refs, s))\n            )}\n          </ul>\n\n          <DocSidebarHeader text=\"Command Line Arguments\" />\n          <ul className=\"mr-5 mb-5\">\n            {commandLineArgumentSections.map((s) =>\n              SideBarDocSection(s, () => ScrollToSection(refs, s))\n            )}\n          </ul>\n        </div>\n\n        {/* Main section with actual documentation */}\n        <div className={twMerge(styles.doc, \"ml-5 max-w-2xl space-y-12\")}>\n          <DocHeader text=\"Fan Curves\" />\n          {fanCurveSections.map((s) => DocSectionComponent(s, refs))}\n\n          <DocHeader text=\"Custom Sensors\" />\n          {customSensorSections.map((s) => DocSectionComponent(s, refs))}\n\n          <DocHeader text=\"Command Line Arguments\" />\n          {commandLineArgumentSections.map((s) => DocSectionComponent(s, refs))}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default DocsPage;\n\nexport const Head: HeadFC = () => (\n  <SEO pathname={pageTitle} title={pageTitle}></SEO>\n);\n","// extracted by mini-css-extract-plugin\nexport var doc = \"docs-module--doc--5783a\";"],"names":["$","flattenIntoArray","toObject","lengthOfArrayLike","toIntegerOrInfinity","arraySpeciesCreate","target","proto","flat","depthArg","arguments","length","undefined","O","this","sourceLen","A","addToUnscopables","mixFunctions","name","invoke","fanCurves","map","x","getValue","reduce","a","b","f","createlinearFanCurve","selectedTemperature","sources","num","min","max","source","find","value","Math","createMixFanCurve","mixFunction","selectedMixFunction","FanCurveCard","number","path","iconPath","fanCurve","controlValueSuffix","children","React","Card","className","viewBox","fill","d","toFixed","MixFanCurveCard","selectedFanCurvesDefault","useState","selectedFanCurveNames","setSelectedFanCurveNames","selectedFanCurves","filter","includes","selectedFunction","setSelectedFunction","suffix","_selectedFanCurves$fi2","icons","Select","onChange","e","selectedIndex","label","key","index","fc","current","disabled","i","onClick","createTempSourceRandom","round","random","createTempSource","BigIcon","Icon","SmallIcon","icon","text","props","restOfProps","twMerge","parameters","timeAverage","render","mixSensor","fileSensor","linear","graph","DocDemoMixFanCurveCard","setSources","useInterval","mockedFanCurves","slice","sync","trigger","mix","pageTitle","fanCurveSections","customSensorSections","commandLineArgumentSections","ScrollToSection","refs","section","htmlItem","get","top","getBoundingClientRect","window","scrollTo","behavior","SideBarDocSection","DocSectionComponent","sections","ref","el","set","NiceHeader","DocSidebarHeader","DocHeader","useRef","Map","Layout","s","Head","SEO","pathname","title"],"sourceRoot":""}