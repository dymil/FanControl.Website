{"version":3,"file":"component---src-pages-demo-tsx-faa93885bbf8f0109cf5.js","mappings":"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","sources":["webpack://fan-control/./src/components/demo/fanCurve.tsx","webpack://fan-control/./src/components/demo/fanCurveCard.tsx","webpack://fan-control/./src/components/demo/mixFanCurveCard.tsx","webpack://fan-control/./src/components/demo/temperatureSource.ts","webpack://fan-control/./src/components/select.tsx","webpack://fan-control/./src/components/toggle.tsx","webpack://fan-control/./src/components/demo/controlCard.tsx","webpack://fan-control/./src/components/demo/temperatureCard.tsx","webpack://fan-control/./src/pages/demo.tsx"],"sourcesContent":["import { TemperatureSource } from \"./temperatureSource\";\r\n\r\ntype FanCurve = {\r\n  name: string;\r\n  getValue: () => number;\r\n};\r\n\r\ntype LinearFanCurve = FanCurve & {\r\n  selectedTemperature?: string;\r\n};\r\n\r\ntype MixFunction = {\r\n  name: string;\r\n  invoke: (fanCurves: FanCurve[]) => number;\r\n};\r\n\r\ntype MixFanCurve = FanCurve & {\r\n  selectedMixFunction: MixFunction\r\n}\r\n\r\nconst mixFunctions: MixFunction[] = [\r\n  {\r\n    name: \"Max\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((x) => x.getValue()).reduce((a, b) => (a > b ? a : b), -1),\r\n  },\r\n  {\r\n    name: \"Min\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((x) => x.getValue()).reduce((a, b) => (a < b ? a : b), 101),\r\n  },\r\n  {\r\n    name: \"Average\",\r\n    invoke: (fanCurves) =>\r\n      fanCurves.map((f) => f.getValue()).reduce((a, b) => a + b, 0) /\r\n      fanCurves.length,\r\n  },\r\n];\r\n\r\n\r\nconst clamp = (num: number, min: number, max: number) =>\r\n  Math.min(Math.max(num, min), max);\r\n\r\nlet createlinearFanCurve = (\r\n  name: string,\r\n  selectedTemperature: string,\r\n  sources: TemperatureSource[]\r\n): LinearFanCurve => {\r\n  const getValue = () => {\r\n    let source = sources.find((x) => x.name == selectedTemperature);\r\n    if (source) {\r\n      return clamp((source.value - 30) * 3, 0, 100);\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  return {\r\n    name,\r\n    selectedTemperature,\r\n    getValue,\r\n  };\r\n};\r\n\r\nlet createMixFanCurve = (name: string, mixFunction: MixFunction, fanCurves: FanCurve[]): MixFanCurve => {\r\n  return {\r\n    name,\r\n    selectedMixFunction: mixFunction,\r\n    getValue: () => {\r\n      return mixFunction.invoke(fanCurves);\r\n    },\r\n  };\r\n};\r\n\r\nexport type { FanCurve, LinearFanCurve, MixFanCurve, MixFunction };\r\n\r\nexport { mixFunctions, createlinearFanCurve, createMixFanCurve }\r\n","import React from \"react\";\r\nimport Card from \"../card\";\r\nimport { FanCurve } from \"./fanCurve\";\r\n\r\nconst icon = (path: string) => (\r\n  <svg className=\"w-12 h-12\" viewBox=\"0 0 24 24\">\r\n    <path fill=\"currentColor\" d={path} />\r\n  </svg>\r\n);\r\n\r\ntype Props = {\r\n  iconPath: string;\r\n  fanCurve: FanCurve;\r\n  controlValueSuffix?: string;\r\n  children?: React.ReactNode;\r\n};\r\n\r\nexport default function FanCurveCard({\r\n  iconPath,\r\n  fanCurve,\r\n  controlValueSuffix,\r\n  children,\r\n}: Props) {\r\n\r\n  const background = \"bg-blue-500\";\r\n  const value = fanCurve.getValue();\r\n  const isValid = (number:number) => number >= 0 && number <= 100;\r\n\r\n  return (\r\n    <Card className={background}>\r\n      <div className=\"flex flex-col text-white w-52\">\r\n        <div className=\"flex flex-row justify-center items-center\">\r\n          {icon(iconPath)}\r\n          <div className=\"border-b-2 ml-4 border-white w-full \">\r\n            {fanCurve.name}\r\n          </div>\r\n        </div>\r\n        <div>{children}</div>\r\n        <div className=\"mt-1 flex flex-row justify-between\">\r\n          <div>\r\n            <span>{isValid(value) ? value.toFixed(1) : \"-\"} %</span>{\" \"}\r\n            <span>{controlValueSuffix}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport icons from \"../../contents/icons\";\r\nimport Select from \"../select\";\r\nimport { createMixFanCurve, FanCurve, MixFanCurve, MixFunction, mixFunctions } from \"./fanCurve\";\r\nimport FanCurveCard from \"./fanCurveCard\";\r\n\r\nexport default function MixFanCurveCard({\r\n  name,\r\n  fanCurves,\r\n  selectedFanCurvesDefault,\r\n}: {\r\n  name: string;\r\n  fanCurves: FanCurve[];\r\n  selectedFanCurvesDefault?: string[];\r\n}) {\r\n  const [selectedFanCurveNames, setSelectedFanCurveNames] = useState(\r\n    selectedFanCurvesDefault ?? fanCurves.map(x => x.name)\r\n  );\r\n\r\n  const selectedFanCurves = fanCurves.filter(x => selectedFanCurveNames.includes(x.name))\r\n\r\n  const [selectedFunction, setSelectedFunction] = useState(mixFunctions[0]);\r\n\r\n  const addFromIndex = (index: number) => {\r\n    let fc = fanCurves[index - 1];\r\n    if (!selectedFanCurveNames.includes(fc.name)) {\r\n      setSelectedFanCurveNames(current => [...current, fc.name]);\r\n    }\r\n  };\r\n\r\n  const fanCurve: MixFanCurve = createMixFanCurve(name, selectedFunction, selectedFanCurves);\r\n\r\n  const suffix =\r\n    selectedFanCurveNames.length > 0\r\n      ? selectedFanCurves.find((x) => x.getValue() == fanCurve.getValue())\r\n          ?.name ?? \"Average\"\r\n      : selectedFunction.name;\r\n\r\n  return (\r\n    <FanCurveCard\r\n      iconPath={icons.svgPaths.mix}\r\n      fanCurve={fanCurve}\r\n      controlValueSuffix={` (${suffix})`}\r\n    >\r\n      <Select\r\n        onChange={(e) => setSelectedFunction(mixFunctions[e.target.selectedIndex])}\r\n        value={fanCurve.selectedMixFunction.name}\r\n        label=\"Function\"\r\n      >\r\n        {mixFunctions.map((f) => {\r\n          return (\r\n            <option key={f.name} value={f.name}>\r\n              {f.name}\r\n            </option>\r\n          );\r\n        })}\r\n      </Select>\r\n      <Select\r\n        value=\"default\"\r\n        onChange={(e) => addFromIndex(e.target.selectedIndex)}\r\n        label=\"\"\r\n        className=\"mt-1\"\r\n      >\r\n        <option key=\"-1\" disabled value=\"default\">\r\n          Add a fan curve...\r\n        </option>\r\n        {fanCurves.map((fc, i) => (\r\n          <option key={i}>{fc.name}</option>\r\n        ))}\r\n      </Select>\r\n\r\n      {selectedFanCurves.map((x, i) => (\r\n        <div key={i} className=\"text-sm my-2 ml-2\">\r\n          <span className=\"mr-1\">○</span> <span>{x.name}</span>\r\n          <span> ({x.getValue()} %)</span>\r\n          <button\r\n            onClick={() =>\r\n              setSelectedFanCurveNames(\r\n                selectedFanCurveNames.filter((f) => f != x.name)\r\n              )\r\n            }\r\n            className=\"float-right border border-white px-1 rounded\"\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </FanCurveCard>\r\n  );\r\n}\r\n","type TemperatureSource = {\r\n  value: number;\r\n  name: string;\r\n};\r\n\r\nfunction createTempSourceRandom(\r\n  name: string,\r\n  min: number,\r\n  max: number\r\n): TemperatureSource {\r\n  return {\r\n    name: name,\r\n    value: Math.round(Math.random() * (max - min) + min),\r\n  };\r\n}\r\n\r\nfunction createTempSource(name: string, value: number): TemperatureSource {\r\n  return {\r\n    name: name,\r\n    value: value,\r\n  };\r\n}\r\n\r\nexport type { TemperatureSource };\r\n\r\nexport { createTempSourceRandom, createTempSource };\r\n","import React from \"react\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nconst defaultClassName =\r\n  \"text-base font-normal text-white w-full bg-transparent border-white border-spacing-1 border-b focus:text-gray-700 focus:bg-white\";\r\n\r\nexport default function (\r\n  props: React.DetailedHTMLProps<\r\n    React.SelectHTMLAttributes<HTMLSelectElement>,\r\n    HTMLSelectElement\r\n  > & { label: String }\r\n) {\r\n  const { className, label, ...restOfProps } = props;\r\n\r\n  return (\r\n    <>\r\n      <label className=\"mb-2 text-sm font-medium\">{props.label}</label>\r\n      <select\r\n        className={twMerge(defaultClassName, className)}\r\n        {...restOfProps}\r\n      ></select>\r\n    </>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\ntype ToggleProps = {\r\n  checkedState: [boolean, React.Dispatch<React.SetStateAction<boolean>>];\r\n  text?: string;\r\n};\r\n\r\nexport default function Toggle({ checkedState, text }: ToggleProps) {\r\n  const [checked, setChecked] = checkedState;\r\n\r\n  const onClick = () => {\r\n    setChecked(!checked);\r\n  };\r\n\r\n  return (\r\n    <label className=\"mr-1 inline-flex py-1 relative cursor-pointer self-center\">\r\n      <input\r\n        type=\"checkbox\"\r\n        className=\"sr-only peer\"\r\n        checked={checked}\r\n        readOnly\r\n      />\r\n      <div\r\n        onClick={onClick}\r\n        className=\"w-9 h-4 bg-gray-200 rounded-full peer peer-focus:ring-blue-300 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-slate-500\"\r\n      ></div>\r\n      <span onClick={onClick} className=\"ml-2 text-sm font-medium select-none\">\r\n        {text}\r\n      </span>\r\n    </label>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport Card from \"../card\";\r\nimport Toggle from \"../toggle\";\r\nimport { FanCurve } from \"./fanCurve\";\r\nimport Select from \"../select\";\r\n\r\nconst icon = (\r\n  <svg className=\"w-12 h-12\" viewBox=\"0 0 24 24\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M12,16A3,3 0 0,1 9,13C9,11.88 9.61,10.9 10.5,10.39L20.21,4.77L14.68,14.35C14.18,15.33 13.17,16 12,16M12,3C13.81,3 15.5,3.5 16.97,4.32L14.87,5.53C14,5.19 13,5 12,5A8,8 0 0,0 4,13C4,15.21 4.89,17.21 6.34,18.65H6.35C6.74,19.04 6.74,19.67 6.35,20.06C5.96,20.45 5.32,20.45 4.93,20.07V20.07C3.12,18.26 2,15.76 2,13A10,10 0 0,1 12,3M22,13C22,15.76 20.88,18.26 19.07,20.07V20.07C18.68,20.45 18.05,20.45 17.66,20.06C17.27,19.67 17.27,19.04 17.66,18.65V18.65C19.11,17.2 20,15.21 20,13C20,12 19.81,11 19.46,10.1L20.67,8C21.5,9.5 22,11.18 22,13Z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nconst ControlCard = ({\r\n  name,\r\n  availableFanCurves,\r\n}: {\r\n  name: string;\r\n  availableFanCurves: FanCurve[];\r\n}) => {\r\n  const enabledState = useState(false);\r\n  const [enabled, _] = enabledState;\r\n  const background = \"bg-slate-400\";\r\n  const [selectedFanCurve, setSelectedFanCurve] = useState(\"\");\r\n\r\n  return (\r\n    <Card className={background}>\r\n      <div className=\"flex flex-col text-white w-52\">\r\n        <div className=\"flex flex-row justify-center items-center\">\r\n          {icon}\r\n          <div className=\"border-b-2 ml-4 border-white w-full \">{name}</div>\r\n        </div>\r\n        <div className=\"mt-1 flex flex-row justify-between\">\r\n          <Toggle checkedState={enabledState} text=\"\"></Toggle>\r\n          <div className=\"w-full\">\r\n            <Select\r\n              label=\"Select a fan curve\"\r\n              value={selectedFanCurve}\r\n              onChange={(e) =>\r\n                setSelectedFanCurve(\r\n                  availableFanCurves[e.target.options.selectedIndex - 1].name\r\n                )\r\n              }\r\n              disabled={!enabled}\r\n            >\r\n              <option key=\"\" disabled>\r\n                {\"\"}\r\n              </option>\r\n              {availableFanCurves.map((fc, i) => (\r\n                <option key={i}>{fc.name}</option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n        </div>\r\n        <div className=\"mt-1 flex flex-row justify-between\">\r\n          <div>\r\n            {enabled\r\n              ? availableFanCurves\r\n                  .find((x) => x.name == selectedFanCurve)\r\n                  ?.getValue() ?? \"-\"\r\n              : \"-\"}{\" \"}\r\n            %\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ControlCard;\r\n","import * as React from \"react\";\r\nimport Card from \"../card\";\r\nimport { TemperatureSource } from \"./temperatureSource\";\r\n\r\nconst icon = (\r\n  <svg className=\"w-12 h-12\" viewBox=\"0 0 24 24\">\r\n    <path\r\n      fill=\"currentColor\"\r\n      d=\"M15 13V5A3 3 0 0 0 9 5V13A5 5 0 1 0 15 13M12 4A1 1 0 0 1 13 5V8H11V5A1 1 0 0 1 12 4Z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nconst TemperatureCard = (temperatureSource: TemperatureSource) => {\r\n\r\n  const background = \"bg-slate-400\";\r\n\r\n  return (\r\n    <Card className={background}>\r\n      <div className=\"flex flex-col text-white w-52\">\r\n        <div className=\"flex flex-row justify-center items-center\">\r\n          {icon}\r\n          <div className=\"border-b-2 ml-4 border-white w-full \">{temperatureSource.name}</div>\r\n        </div>\r\n        <div className=\"mt-1 flex flex-row justify-between\">\r\n          <div>{temperatureSource.value} deg C</div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TemperatureCard;\r\n","import * as React from \"react\";\r\nimport type { HeadFC } from \"gatsby\";\r\nimport Layout from \"../components/layout\";\r\nimport ControlCard from \"../components/demo/controlCard\";\r\nimport TemperatureCard from \"../components/demo/temperatureCard\";\r\nimport {\r\n  createTempSourceRandom,\r\n  TemperatureSource,\r\n} from \"../components/demo/temperatureSource\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  createlinearFanCurve,\r\n  createMixFanCurve,\r\n  FanCurve,\r\n  LinearFanCurve,\r\n  mixFunctions,\r\n} from \"../components/demo/fanCurve\";\r\nimport FanCurveCard from \"../components/demo/fanCurveCard\";\r\nimport icons from \"./../contents/icons\";\r\nimport { useInterval } from \"../utilities/customHooks\";\r\nimport MixFanCurveCard from \"../components/demo/mixFanCurveCard\";\r\n\r\nconst pageTitle = \"Demo\";\r\n\r\nconst getSources = (): TemperatureSource[] => [\r\n  createTempSourceRandom(\"CPU\", 30, 60),\r\n  createTempSourceRandom(\"GPU\", 35, 85),\r\n];\r\n\r\nconst getLinearFanCurves = (sources: TemperatureSource[]): LinearFanCurve[] => [\r\n  createlinearFanCurve(\"Linear CPU\", \"CPU\", sources),\r\n  createlinearFanCurve(\"Linear GPU\", \"GPU\", sources),\r\n];\r\n\r\nconst LinearFanCurveCard = (fanCurve: LinearFanCurve) => {\r\n  return (\r\n    <FanCurveCard\r\n      iconPath={icons.svgPaths.linear}\r\n      fanCurve={fanCurve}\r\n    ></FanCurveCard>\r\n  );\r\n};\r\n\r\nconst DemoPage = () => {\r\n  const [sources, setSources] = useState(getSources());\r\n\r\n  useInterval(1000, () => {\r\n    let updatedSources = getSources();\r\n    setSources(updatedSources);\r\n  });\r\n\r\n  let linears = getLinearFanCurves(sources);\r\n  let mix = createMixFanCurve(\"Mix\", mixFunctions[0], linears);\r\n  let fanCurves = [...linears, mix];\r\n\r\n  return (\r\n    <Layout pageTitle={pageTitle}>\r\n      <div className=\"flex gap-3 w-full flex-wrap flex-col \">\r\n        Controls\r\n        <div className=\"flex gap-3 flex-wrap\">\r\n          <ControlCard name=\"Front Fan\" availableFanCurves={fanCurves} />\r\n          <ControlCard name=\"Top Fan\" availableFanCurves={fanCurves} />\r\n        </div>\r\n        Temperatures\r\n        <div className=\"flex gap-3 flex-wrap\">\r\n          {sources.map((x, i) => (\r\n            <div key={i}>{TemperatureCard(x)}</div>\r\n          ))}\r\n        </div>\r\n        Fan Curves\r\n        <div className=\"flex gap-3 flex-wrap\">\r\n          {linears.map((x, i) => (\r\n            <div key={i}>{LinearFanCurveCard(x)}</div>\r\n          ))}\r\n          <MixFanCurveCard name=\"Mix\" fanCurves={linears}></MixFanCurveCard>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default DemoPage;\r\n\r\nexport const Head: HeadFC = () => <title>{pageTitle}</title>;\r\n"],"names":["mixFunctions","name","invoke","fanCurves","map","x","getValue","reduce","a","b","f","length","createlinearFanCurve","selectedTemperature","sources","num","min","max","source","find","value","Math","createMixFanCurve","mixFunction","selectedMixFunction","FanCurveCard","number","path","iconPath","fanCurve","controlValueSuffix","children","React","Card","className","viewBox","fill","d","toFixed","MixFanCurveCard","selectedFanCurvesDefault","useState","selectedFanCurveNames","setSelectedFanCurveNames","selectedFanCurves","filter","includes","selectedFunction","setSelectedFunction","suffix","_selectedFanCurves$fi2","icons","Select","onChange","e","target","selectedIndex","label","key","index","fc","current","disabled","i","onClick","createTempSourceRandom","round","random","createTempSource","props","restOfProps","twMerge","Toggle","checkedState","text","checked","setChecked","type","readOnly","icon","availableFanCurves","enabledState","enabled","selectedFanCurve","setSelectedFanCurve","options","_availableFanCurves$f2","temperatureSource","pageTitle","getSources","setSources","useInterval","updatedSources","linears","getLinearFanCurves","mix","Layout","ControlCard","TemperatureCard","LinearFanCurveCard","Head"],"sourceRoot":""}